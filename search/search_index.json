{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Alcali Documentation \u00b6 What's Alcali? \u00b6 Alcali is a web based tool for monitoring and administrating Saltstack Salt. Features \u00b6 Get notified in real time when a job is created, updated or has returned. Store your jobs results by leveraging the master_job_store setting with database master returner. Check your minions conformity to their highstate or any state . Keep track of custom state at a glance. Use custom auth module to login into both Alcali and the Salt-api using JWT. LDAP and Google OAuth2 authentication. Contributing \u00b6 If you'd like to contribute, check the contribute documentation on how to install a dev environment and submit PR! And if you like this project, consider donating: via GitHub Sponsors, or Image: Jean-Philippe WMFr, derivative work : User:Benoit Rochon CC BY-SA 4.0","title":"Home"},{"location":"#welcome-to-alcali-documentation","text":"","title":"Welcome to Alcali Documentation"},{"location":"#whats-alcali","text":"Alcali is a web based tool for monitoring and administrating Saltstack Salt.","title":"What's Alcali?"},{"location":"#features","text":"Get notified in real time when a job is created, updated or has returned. Store your jobs results by leveraging the master_job_store setting with database master returner. Check your minions conformity to their highstate or any state . Keep track of custom state at a glance. Use custom auth module to login into both Alcali and the Salt-api using JWT. LDAP and Google OAuth2 authentication.","title":"Features"},{"location":"#contributing","text":"If you'd like to contribute, check the contribute documentation on how to install a dev environment and submit PR! And if you like this project, consider donating: via GitHub Sponsors, or Image: Jean-Philippe WMFr, derivative work : User:Benoit Rochon CC BY-SA 4.0","title":"Contributing"},{"location":"configuration/","text":"Configuration \u00b6 Configure Alcali \u00b6 If you used the formula to install alcali, you should use the pillar to set those environment variable. DB_BACKEND \u00b6 Must either be set to mysql or postgresql depending on your database choice. DB_NAME \u00b6 Must always be set to salt . DB_USER \u00b6 The username used to connect to the salt database. DB_PASS \u00b6 The password used to connect to the salt database. DB_HOST \u00b6 Either the hostname or the IP used to connect to the salt database. DB_PORT \u00b6 By default 3306 for Mysql or 5432 for Postgres. SECRET_KEY \u00b6 Used to provide cryptographic signing, and should be set to a unique, unpredictable value. ALLOWED_HOSTS \u00b6 Values in this list can be fully qualified names (e.g. 'www.example.com'), in which case they will be matched against the request\u2019s Host header exactly (case-insensitive, not including port). A value beginning with a period can be used as a subdomain wildcard: '.example.com' will match example.com, www.example.com, and any other subdomain of example.com. A value of '*' will match anything. MASTER_MINION_ID \u00b6 Salt master's minion id. leave empty if not managed. SALT_URL \u00b6 The salt-api url. Must be formed with protocol, host and port (e.g. 'https://localhost:8080') SALT_AUTH \u00b6 How you choose to authenticate to the salt-api. Must be set to rest or alcali . LDAP configuration \u00b6 Please refer to django-auth-ldap documentation reference . Here is a list of the supported settings: AUTH_LDAP_SERVER_URI AUTH_LDAP_BIND_DN AUTH_LDAP_BIND_PASSWORD AUTH_LDAP_USER_DN_TEMPLATE AUTH_LDAP_REQUIRE_GROUP AUTH_LDAP_DENY_GROUP AUTH_LDAP_START_TLS search/bind and direct bind \u00b6 If you set AUTH_LDAP_USER_DN_TEMPLATE the search phase will be skipped. Otherwise, you can set the search base cn with: AUTH_LDAP_USER_BASE_CN and the search filter with: AUTH_LDAP_USER_SEARCH_FILTER default: \"(objectClass=*)\" see next for an example. Attribute mapping \u00b6 Here is the default attribute mapping and the env var to use to override them: # Populate the Django user from the LDAP directory. AUTH_LDAP_USER_ATTR_MAP = { \"username\" : os . environ . get ( \"AUTH_LDAP_USER_ATTR_MAP_USERNAME\" , \"sAMAccountName\" ), \"first_name\" : os . environ . get ( \"AUTH_LDAP_USER_ATTR_MAP_FIRST_NAME\" , \"givenName\" ), \"last_name\" : os . environ . get ( \"AUTH_LDAP_USER_ATTR_MAP_LAST_NAME\" , \"sn\" ), \"email\" : os . environ . get ( \"AUTH_LDAP_USER_ATTR_MAP_EMAIL\" , \"mail\" ), } Google OAuth2 configuration \u00b6 These environment variable must be set: AUTH_BACKEND = social SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = XXXXX.apps.googleusercontent.com SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = XXX SOCIAL_AUTH_REDIRECT_URI = <FULL URI> ex: https://foo.bar:9000 To limit access to certain emails: SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_EMAILS = <COMMA SEP EMAILS> and/or certain domains: SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = <COMMA SEP DOMAINS> .env file example: \u00b6 DB_BACKEND = mysql DB_NAME = salt DB_USER = alcali DB_PASS = alcali DB_HOST = db DB_PORT = 3306 SECRET_KEY = thisisnotagoodsecret.orisit? ALLOWED_HOSTS = * MASTER_MINION_ID = master SALT_URL = https://localhost:8080 SALT_AUTH = alcali If you want to use LDAP authentication, you'll also need: AUTH_BACKEND = ldap AUTH_LDAP_SERVER_URI = ldap://ldap-server AUTH_LDAP_BIND_DN = cn = admin,dc = example,dc = org AUTH_LDAP_BIND_PASSWORD = admin AUTH_LDAP_USER_BASE_CN = dc = example,dc = org AUTH_LDAP_USER_SEARCH_FILTER =( uid = % ( user ) s ) Docker \u00b6 You can pass the .env file to the docker run command with the --env-file=FILE option. See running Alcali . Running locally \u00b6 Use the ENV_PATH environment variable. Example: # Assuming the .env file is in /opt/alcali ENV_PATH=/opt/alcali /opt/alcali/.venv/bin/gunicorn config.wsgi:application -b 127.0.0.1:8000 -w 3 See running Alcali .","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#configure-alcali","text":"If you used the formula to install alcali, you should use the pillar to set those environment variable.","title":"Configure Alcali"},{"location":"configuration/#db_backend","text":"Must either be set to mysql or postgresql depending on your database choice.","title":"DB_BACKEND"},{"location":"configuration/#db_name","text":"Must always be set to salt .","title":"DB_NAME"},{"location":"configuration/#db_user","text":"The username used to connect to the salt database.","title":"DB_USER"},{"location":"configuration/#db_pass","text":"The password used to connect to the salt database.","title":"DB_PASS"},{"location":"configuration/#db_host","text":"Either the hostname or the IP used to connect to the salt database.","title":"DB_HOST"},{"location":"configuration/#db_port","text":"By default 3306 for Mysql or 5432 for Postgres.","title":"DB_PORT"},{"location":"configuration/#secret_key","text":"Used to provide cryptographic signing, and should be set to a unique, unpredictable value.","title":"SECRET_KEY"},{"location":"configuration/#allowed_hosts","text":"Values in this list can be fully qualified names (e.g. 'www.example.com'), in which case they will be matched against the request\u2019s Host header exactly (case-insensitive, not including port). A value beginning with a period can be used as a subdomain wildcard: '.example.com' will match example.com, www.example.com, and any other subdomain of example.com. A value of '*' will match anything.","title":"ALLOWED_HOSTS"},{"location":"configuration/#master_minion_id","text":"Salt master's minion id. leave empty if not managed.","title":"MASTER_MINION_ID"},{"location":"configuration/#salt_url","text":"The salt-api url. Must be formed with protocol, host and port (e.g. 'https://localhost:8080')","title":"SALT_URL"},{"location":"configuration/#salt_auth","text":"How you choose to authenticate to the salt-api. Must be set to rest or alcali .","title":"SALT_AUTH"},{"location":"configuration/#ldap-configuration","text":"Please refer to django-auth-ldap documentation reference . Here is a list of the supported settings: AUTH_LDAP_SERVER_URI AUTH_LDAP_BIND_DN AUTH_LDAP_BIND_PASSWORD AUTH_LDAP_USER_DN_TEMPLATE AUTH_LDAP_REQUIRE_GROUP AUTH_LDAP_DENY_GROUP AUTH_LDAP_START_TLS","title":"LDAP configuration"},{"location":"configuration/#searchbind-and-direct-bind","text":"If you set AUTH_LDAP_USER_DN_TEMPLATE the search phase will be skipped. Otherwise, you can set the search base cn with: AUTH_LDAP_USER_BASE_CN and the search filter with: AUTH_LDAP_USER_SEARCH_FILTER default: \"(objectClass=*)\" see next for an example.","title":"search/bind and direct bind"},{"location":"configuration/#attribute-mapping","text":"Here is the default attribute mapping and the env var to use to override them: # Populate the Django user from the LDAP directory. AUTH_LDAP_USER_ATTR_MAP = { \"username\" : os . environ . get ( \"AUTH_LDAP_USER_ATTR_MAP_USERNAME\" , \"sAMAccountName\" ), \"first_name\" : os . environ . get ( \"AUTH_LDAP_USER_ATTR_MAP_FIRST_NAME\" , \"givenName\" ), \"last_name\" : os . environ . get ( \"AUTH_LDAP_USER_ATTR_MAP_LAST_NAME\" , \"sn\" ), \"email\" : os . environ . get ( \"AUTH_LDAP_USER_ATTR_MAP_EMAIL\" , \"mail\" ), }","title":"Attribute mapping"},{"location":"configuration/#google-oauth2-configuration","text":"These environment variable must be set: AUTH_BACKEND = social SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = XXXXX.apps.googleusercontent.com SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = XXX SOCIAL_AUTH_REDIRECT_URI = <FULL URI> ex: https://foo.bar:9000 To limit access to certain emails: SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_EMAILS = <COMMA SEP EMAILS> and/or certain domains: SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = <COMMA SEP DOMAINS>","title":"Google OAuth2 configuration"},{"location":"configuration/#env-file-example","text":"DB_BACKEND = mysql DB_NAME = salt DB_USER = alcali DB_PASS = alcali DB_HOST = db DB_PORT = 3306 SECRET_KEY = thisisnotagoodsecret.orisit? ALLOWED_HOSTS = * MASTER_MINION_ID = master SALT_URL = https://localhost:8080 SALT_AUTH = alcali If you want to use LDAP authentication, you'll also need: AUTH_BACKEND = ldap AUTH_LDAP_SERVER_URI = ldap://ldap-server AUTH_LDAP_BIND_DN = cn = admin,dc = example,dc = org AUTH_LDAP_BIND_PASSWORD = admin AUTH_LDAP_USER_BASE_CN = dc = example,dc = org AUTH_LDAP_USER_SEARCH_FILTER =( uid = % ( user ) s )","title":".env file example:"},{"location":"configuration/#docker","text":"You can pass the .env file to the docker run command with the --env-file=FILE option. See running Alcali .","title":"Docker"},{"location":"configuration/#running-locally","text":"Use the ENV_PATH environment variable. Example: # Assuming the .env file is in /opt/alcali ENV_PATH=/opt/alcali /opt/alcali/.venv/bin/gunicorn config.wsgi:application -b 127.0.0.1:8000 -w 3 See running Alcali .","title":"Running locally"},{"location":"contribute/","text":"Contributing Guide \u00b6 Contributing to Alcali is fairly easy. This document shows you how to get started General \u00b6 Please ensure that any changes you make are in accordance with the Coding Guidelines of this repo. Just use Black to validate your python code. Install a dev environment \u00b6 First fork the repository and install your fork locally. git clone git@github.com:<YOUR USERNAME>/alcali.git cd alcali Alcali use Vuejs for the frontend and Django for the backend. Frontend dev \u00b6 Install the Vue CLI: npm install -g @vue/cli # OR yarn global add @vue/cli install js deps: npm install # OR yarn install and run your build locally: npm run serve -- --port 8001 You will also need a backend running in another terminal. Backend dev \u00b6 docker-compose up --build --force-recreate --renew-anon-volumes --scale minion=2 Documentation \u00b6 To contribute to the documentation, you'll need to install the python requirements, preferably in a virtualenv: python3 -m venv .venv source .venv/bin/activate pip install -r requirements/docs.txt And build it locally: cd docs mkdocs serve -a 127.0.0.1:8003 Run tests locally \u00b6 dc -f docker-compose-ci.yml up --build --force-recreate --renew-anon-volumes and in another shell: ./docker/utils/ci_script.sh Tests are idempotent~ish Submitting changes \u00b6 Check out a new branch based and name it to what you intend to do: $ git checkout -b BRANCH_NAME feature/fooBar If you get an error, you may need to fetch fooBar first by using $ git remote update && git fetch Use one branch per fix / feature Commit your changes Please provide a git message that explains what you've done Please make sure your commits follow the conventions Commit to the forked repository $ git commit -am 'Add some fooBar' Push to the branch $ git push origin feature/fooBar Make a pull request - Make sure you send the PR to the fooBar branch - Travis CI is watching you! If you follow these instructions, your PR will land pretty safely in the main repo!","title":"Contribute"},{"location":"contribute/#contributing-guide","text":"Contributing to Alcali is fairly easy. This document shows you how to get started","title":"Contributing Guide"},{"location":"contribute/#general","text":"Please ensure that any changes you make are in accordance with the Coding Guidelines of this repo. Just use Black to validate your python code.","title":"General"},{"location":"contribute/#install-a-dev-environment","text":"First fork the repository and install your fork locally. git clone git@github.com:<YOUR USERNAME>/alcali.git cd alcali Alcali use Vuejs for the frontend and Django for the backend.","title":"Install a dev environment"},{"location":"contribute/#frontend-dev","text":"Install the Vue CLI: npm install -g @vue/cli # OR yarn global add @vue/cli install js deps: npm install # OR yarn install and run your build locally: npm run serve -- --port 8001 You will also need a backend running in another terminal.","title":"Frontend dev"},{"location":"contribute/#backend-dev","text":"docker-compose up --build --force-recreate --renew-anon-volumes --scale minion=2","title":"Backend dev"},{"location":"contribute/#documentation","text":"To contribute to the documentation, you'll need to install the python requirements, preferably in a virtualenv: python3 -m venv .venv source .venv/bin/activate pip install -r requirements/docs.txt And build it locally: cd docs mkdocs serve -a 127.0.0.1:8003","title":"Documentation"},{"location":"contribute/#run-tests-locally","text":"dc -f docker-compose-ci.yml up --build --force-recreate --renew-anon-volumes and in another shell: ./docker/utils/ci_script.sh Tests are idempotent~ish","title":"Run tests locally"},{"location":"contribute/#submitting-changes","text":"Check out a new branch based and name it to what you intend to do: $ git checkout -b BRANCH_NAME feature/fooBar If you get an error, you may need to fetch fooBar first by using $ git remote update && git fetch Use one branch per fix / feature Commit your changes Please provide a git message that explains what you've done Please make sure your commits follow the conventions Commit to the forked repository $ git commit -am 'Add some fooBar' Push to the branch $ git push origin feature/fooBar Make a pull request - Make sure you send the PR to the fooBar branch - Travis CI is watching you! If you follow these instructions, your PR will land pretty safely in the main repo!","title":"Submitting changes"},{"location":"installation/","text":"Installation \u00b6 Prerequisite \u00b6 A database ( MariaDB/Mysql or Postgres ) accessible to both your Salt master and Alcali. the Salt-Api installed and accessible by Alcali. Preparing the salt master \u00b6 Database access and master job store configuration \u00b6 The salt master needs to store its jobs on the chosen database. Warning Don't forget to install database connectors: python-mysqldb/python3-mysqldb for MySQL/MariaDB python-psycopg2/python3-psycopg2 for Postgres MySQL/MariaDB schema and configuration example CREATE DATABASE ` salt ` DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci ; USE ` salt ` ; -- -- Table structure for table `jids` -- DROP TABLE IF EXISTS ` jids ` ; CREATE TABLE ` jids ` ( ` jid ` varchar ( 255 ) NOT NULL , ` load ` mediumtext NOT NULL , UNIQUE KEY ` jid ` ( ` jid ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 ; -- -- Table structure for table `salt_returns` -- DROP TABLE IF EXISTS ` salt_returns ` ; CREATE TABLE ` salt_returns ` ( ` fun ` varchar ( 50 ) NOT NULL , ` jid ` varchar ( 255 ) NOT NULL , ` return ` mediumtext NOT NULL , ` id ` varchar ( 255 ) NOT NULL , ` success ` varchar ( 10 ) NOT NULL , ` full_ret ` mediumtext NOT NULL , ` alter_time ` TIMESTAMP DEFAULT CURRENT_TIMESTAMP , KEY ` id ` ( ` id ` ), KEY ` jid ` ( ` jid ` ), KEY ` fun ` ( ` fun ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 ; -- -- Table structure for table `salt_events` -- DROP TABLE IF EXISTS ` salt_events ` ; CREATE TABLE ` salt_events ` ( ` id ` BIGINT NOT NULL AUTO_INCREMENT , ` tag ` varchar ( 255 ) NOT NULL , ` data ` mediumtext NOT NULL , ` alter_time ` TIMESTAMP DEFAULT CURRENT_TIMESTAMP , ` master_id ` varchar ( 255 ) NOT NULL , PRIMARY KEY ( ` id ` ), KEY ` tag ` ( ` tag ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 ; Salt master configuration example: event_return : [ mysql ] master_job_cache : mysql mysql.host : 'db' mysql.user : 'alcali' mysql.pass : 'alcali' mysql.db : 'salt' mysql.port : 3306 Postgres commands and configuration example psql << EOF CREATE ROLE salt WITH PASSWORD 'salt' ; CREATE DATABASE salt WITH OWNER salt ; EOF psql - h localhost - U salt << EOF -- -- Table structure for table 'jids' -- DROP TABLE IF EXISTS jids ; CREATE TABLE jids ( jid varchar ( 20 ) PRIMARY KEY , load text NOT NULL ); -- -- Table structure for table 'salt_returns' -- DROP TABLE IF EXISTS salt_returns ; CREATE TABLE salt_returns ( fun varchar ( 50 ) NOT NULL , jid varchar ( 255 ) NOT NULL , return text NOT NULL , full_ret text , id varchar ( 255 ) NOT NULL , success varchar ( 10 ) NOT NULL , alter_time TIMESTAMP WITH TIME ZONE DEFAULT now () ); CREATE INDEX idx_salt_returns_id ON salt_returns ( id ); CREATE INDEX idx_salt_returns_jid ON salt_returns ( jid ); CREATE INDEX idx_salt_returns_fun ON salt_returns ( fun ); CREATE INDEX idx_salt_returns_updated ON salt_returns ( alter_time ); -- -- Table structure for table 'salt_events' -- DROP TABLE IF EXISTS salt_events ; DROP SEQUENCE IF EXISTS seq_salt_events_id ; CREATE SEQUENCE seq_salt_events_id ; CREATE TABLE salt_events ( id BIGINT NOT NULL UNIQUE DEFAULT nextval ( 'seq_salt_events_id' ), tag varchar ( 255 ) NOT NULL , data text NOT NULL , alter_time TIMESTAMP WITH TIME ZONE DEFAULT NOW (), master_id varchar ( 255 ) NOT NULL ); CREATE INDEX idx_salt_events_tag on salt_events ( tag ); EOF Salt master configuration example: event_return : [ postgres ] master_job_cache : postgres returner.postgres.host : 'db' returner.postgres.user : 'alcali' returner.postgres.passwd : 'alcali' returner.postgres.db : 'salt' returner.postgres.port : 5432 By default, jobs are only kept for 24 hours. Set keep_jobs: 0 to disable the cache cleaner (see managing the job cache ). Returners provide a way to archive old jobs. Refer to Salt MySQL or Postgres returner documentation for more information. Salt Api \u00b6 Salt master configuration example: rest_cherrypy : port : 8080 host : 0.0.0.0 debug : True ssl_crt : /etc/pki/tls/certs/localhost.crt ssl_key : /etc/pki/tls/certs/localhost.key Install instruction example (On Debian 9 using Salt python3 version): apt-get install -y salt-api python3-openssl salt-call --local tls.create_self_signed_cert cacert_path = '/etc/pki' Please refer to Salt rest_cherrypy documentation for more infos on how to setup the salt-api. Authentication \u00b6 Alcali provide two authentication methods: a rest endpoint on alcali. a custom token based auth module for Salt. Rest endpoint authentication \u00b6 To use the rest endpoint authentication, the salt master must be able to connect to alcali. Set SALT_AUTH=rest in the env file and use the rest external auth in the salt master configuration. the ^url key is how the salt master connect to alcali. external_auth : rest : ^url : http://127.0.0.1:8000/api/token/verify/ admin : - .* - '@runner' - '@wheel' Custom token auth module \u00b6 Set SALT_AUTH=alcali in the env file You can get the Alcali auth module here Place it on the salt filesystem (for example: /srv/salt/auth ) and add it to your Salt master configuration: auth_dirs : [ /srv/salt/auth ] External auth example: external_auth : alcali : admin : - .* - '@runner' - '@wheel' Don't forget to run salt-run saltutil.sync_all on the salt master. See Saltstack external auth system for more infos. Tokens can be managed using the alcali command or directly in the web interface . Installing Alcali \u00b6 The easiest way to install Alcali is to use the Salt Formula Info Alcali follow Salt major and minor versioning. If you are using 2019.2.X Salt version, you should install 2019.2.X Alcali version. Otherwise, there are 3 different ways to install Alcali manually: Using a docker container From PyPI From Sources Using Docker \u00b6 The official Docker image for Alcali comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI. Pull it with: # you can specify which version: latenighttales/alcali:2018.3.2 docker pull latenighttales/alcali:latest The alcali executable is provided as an entrypoint. Locally \u00b6 To install Alcali locally, you'll need to install database connectors dependencies: For Debian based distribution: # For postgres database apt install libpq-dev gcc # For mariadb database apt install libmariadbclient-dev gcc For Red-Hat based distribution: # For postgres database yum install libpq-devel gcc # For mariadb database yum install mysql-devel gcc Install from PyPI \u00b6 Warning We strongly recommend installing Alcali in a virtualenv . Example: python3 -m venv $HOME/.venv source $HOME/.venv/bin/activate Simply do: pip install --user alcali And for mysql/mariadb: pip install --user mysqlclient or for postgres: pip install --user psycopg2 Install from Sources \u00b6 git clone https://github.com/latenighttales/alcali.git git checkout 2019.2 # or 2018.3 pip install --user . And for mysql/mariadb: pip install --user mysqlclient or for postgres: pip install --user psycopg2 Installation with LDAP support \u00b6 if you want to use LDAP to authenticate users, you'll need these system dependencies: For Debian based distribution: apt install libldap2-dev libsasl2-dev ldap-utils For Red-Hat based distribution: yum install openldap-devel To add LDAP support to alcali, just append [ldap] to the chosen install method i.e: # Install from PyPI pip install --user alcali[ldap] # Install from Source pip install --user .[ldap] Installation with Google OAuth2 support \u00b6 To add Google OAuth2 support to alcali, just append [social] to the chosen install method i.e: # Install from PyPI pip install --user alcali[social] # Install from Source pip install --user .[social]","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#prerequisite","text":"A database ( MariaDB/Mysql or Postgres ) accessible to both your Salt master and Alcali. the Salt-Api installed and accessible by Alcali.","title":"Prerequisite"},{"location":"installation/#preparing-the-salt-master","text":"","title":"Preparing the salt master"},{"location":"installation/#database-access-and-master-job-store-configuration","text":"The salt master needs to store its jobs on the chosen database. Warning Don't forget to install database connectors: python-mysqldb/python3-mysqldb for MySQL/MariaDB python-psycopg2/python3-psycopg2 for Postgres MySQL/MariaDB schema and configuration example CREATE DATABASE ` salt ` DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci ; USE ` salt ` ; -- -- Table structure for table `jids` -- DROP TABLE IF EXISTS ` jids ` ; CREATE TABLE ` jids ` ( ` jid ` varchar ( 255 ) NOT NULL , ` load ` mediumtext NOT NULL , UNIQUE KEY ` jid ` ( ` jid ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 ; -- -- Table structure for table `salt_returns` -- DROP TABLE IF EXISTS ` salt_returns ` ; CREATE TABLE ` salt_returns ` ( ` fun ` varchar ( 50 ) NOT NULL , ` jid ` varchar ( 255 ) NOT NULL , ` return ` mediumtext NOT NULL , ` id ` varchar ( 255 ) NOT NULL , ` success ` varchar ( 10 ) NOT NULL , ` full_ret ` mediumtext NOT NULL , ` alter_time ` TIMESTAMP DEFAULT CURRENT_TIMESTAMP , KEY ` id ` ( ` id ` ), KEY ` jid ` ( ` jid ` ), KEY ` fun ` ( ` fun ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 ; -- -- Table structure for table `salt_events` -- DROP TABLE IF EXISTS ` salt_events ` ; CREATE TABLE ` salt_events ` ( ` id ` BIGINT NOT NULL AUTO_INCREMENT , ` tag ` varchar ( 255 ) NOT NULL , ` data ` mediumtext NOT NULL , ` alter_time ` TIMESTAMP DEFAULT CURRENT_TIMESTAMP , ` master_id ` varchar ( 255 ) NOT NULL , PRIMARY KEY ( ` id ` ), KEY ` tag ` ( ` tag ` ) ) ENGINE = InnoDB DEFAULT CHARSET = utf8 ; Salt master configuration example: event_return : [ mysql ] master_job_cache : mysql mysql.host : 'db' mysql.user : 'alcali' mysql.pass : 'alcali' mysql.db : 'salt' mysql.port : 3306 Postgres commands and configuration example psql << EOF CREATE ROLE salt WITH PASSWORD 'salt' ; CREATE DATABASE salt WITH OWNER salt ; EOF psql - h localhost - U salt << EOF -- -- Table structure for table 'jids' -- DROP TABLE IF EXISTS jids ; CREATE TABLE jids ( jid varchar ( 20 ) PRIMARY KEY , load text NOT NULL ); -- -- Table structure for table 'salt_returns' -- DROP TABLE IF EXISTS salt_returns ; CREATE TABLE salt_returns ( fun varchar ( 50 ) NOT NULL , jid varchar ( 255 ) NOT NULL , return text NOT NULL , full_ret text , id varchar ( 255 ) NOT NULL , success varchar ( 10 ) NOT NULL , alter_time TIMESTAMP WITH TIME ZONE DEFAULT now () ); CREATE INDEX idx_salt_returns_id ON salt_returns ( id ); CREATE INDEX idx_salt_returns_jid ON salt_returns ( jid ); CREATE INDEX idx_salt_returns_fun ON salt_returns ( fun ); CREATE INDEX idx_salt_returns_updated ON salt_returns ( alter_time ); -- -- Table structure for table 'salt_events' -- DROP TABLE IF EXISTS salt_events ; DROP SEQUENCE IF EXISTS seq_salt_events_id ; CREATE SEQUENCE seq_salt_events_id ; CREATE TABLE salt_events ( id BIGINT NOT NULL UNIQUE DEFAULT nextval ( 'seq_salt_events_id' ), tag varchar ( 255 ) NOT NULL , data text NOT NULL , alter_time TIMESTAMP WITH TIME ZONE DEFAULT NOW (), master_id varchar ( 255 ) NOT NULL ); CREATE INDEX idx_salt_events_tag on salt_events ( tag ); EOF Salt master configuration example: event_return : [ postgres ] master_job_cache : postgres returner.postgres.host : 'db' returner.postgres.user : 'alcali' returner.postgres.passwd : 'alcali' returner.postgres.db : 'salt' returner.postgres.port : 5432 By default, jobs are only kept for 24 hours. Set keep_jobs: 0 to disable the cache cleaner (see managing the job cache ). Returners provide a way to archive old jobs. Refer to Salt MySQL or Postgres returner documentation for more information.","title":"Database access and master job store configuration"},{"location":"installation/#salt-api","text":"Salt master configuration example: rest_cherrypy : port : 8080 host : 0.0.0.0 debug : True ssl_crt : /etc/pki/tls/certs/localhost.crt ssl_key : /etc/pki/tls/certs/localhost.key Install instruction example (On Debian 9 using Salt python3 version): apt-get install -y salt-api python3-openssl salt-call --local tls.create_self_signed_cert cacert_path = '/etc/pki' Please refer to Salt rest_cherrypy documentation for more infos on how to setup the salt-api.","title":"Salt Api"},{"location":"installation/#authentication","text":"Alcali provide two authentication methods: a rest endpoint on alcali. a custom token based auth module for Salt.","title":"Authentication"},{"location":"installation/#rest-endpoint-authentication","text":"To use the rest endpoint authentication, the salt master must be able to connect to alcali. Set SALT_AUTH=rest in the env file and use the rest external auth in the salt master configuration. the ^url key is how the salt master connect to alcali. external_auth : rest : ^url : http://127.0.0.1:8000/api/token/verify/ admin : - .* - '@runner' - '@wheel'","title":"Rest endpoint authentication"},{"location":"installation/#custom-token-auth-module","text":"Set SALT_AUTH=alcali in the env file You can get the Alcali auth module here Place it on the salt filesystem (for example: /srv/salt/auth ) and add it to your Salt master configuration: auth_dirs : [ /srv/salt/auth ] External auth example: external_auth : alcali : admin : - .* - '@runner' - '@wheel' Don't forget to run salt-run saltutil.sync_all on the salt master. See Saltstack external auth system for more infos. Tokens can be managed using the alcali command or directly in the web interface .","title":"Custom token auth module"},{"location":"installation/#installing-alcali","text":"The easiest way to install Alcali is to use the Salt Formula Info Alcali follow Salt major and minor versioning. If you are using 2019.2.X Salt version, you should install 2019.2.X Alcali version. Otherwise, there are 3 different ways to install Alcali manually: Using a docker container From PyPI From Sources","title":"Installing Alcali"},{"location":"installation/#using-docker","text":"The official Docker image for Alcali comes with all dependencies pre-installed and ready-to-use with the latest version published on PyPI. Pull it with: # you can specify which version: latenighttales/alcali:2018.3.2 docker pull latenighttales/alcali:latest The alcali executable is provided as an entrypoint.","title":"Using Docker"},{"location":"installation/#locally","text":"To install Alcali locally, you'll need to install database connectors dependencies: For Debian based distribution: # For postgres database apt install libpq-dev gcc # For mariadb database apt install libmariadbclient-dev gcc For Red-Hat based distribution: # For postgres database yum install libpq-devel gcc # For mariadb database yum install mysql-devel gcc","title":"Locally"},{"location":"installation/#install-from-pypi","text":"Warning We strongly recommend installing Alcali in a virtualenv . Example: python3 -m venv $HOME/.venv source $HOME/.venv/bin/activate Simply do: pip install --user alcali And for mysql/mariadb: pip install --user mysqlclient or for postgres: pip install --user psycopg2","title":"Install from PyPI"},{"location":"installation/#install-from-sources","text":"git clone https://github.com/latenighttales/alcali.git git checkout 2019.2 # or 2018.3 pip install --user . And for mysql/mariadb: pip install --user mysqlclient or for postgres: pip install --user psycopg2","title":"Install from Sources"},{"location":"installation/#installation-with-ldap-support","text":"if you want to use LDAP to authenticate users, you'll need these system dependencies: For Debian based distribution: apt install libldap2-dev libsasl2-dev ldap-utils For Red-Hat based distribution: yum install openldap-devel To add LDAP support to alcali, just append [ldap] to the chosen install method i.e: # Install from PyPI pip install --user alcali[ldap] # Install from Source pip install --user .[ldap]","title":"Installation with LDAP support"},{"location":"installation/#installation-with-google-oauth2-support","text":"To add Google OAuth2 support to alcali, just append [social] to the chosen install method i.e: # Install from PyPI pip install --user alcali[social] # Install from Source pip install --user .[social]","title":"Installation with Google OAuth2 support"},{"location":"licence/","text":"Licence \u00b6 MIT License Copyright (c) 2019 Matt Melquiond Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"licence/#licence","text":"MIT License Copyright (c) 2019 Matt Melquiond Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"running/","text":"Running Alcali \u00b6 Info This page will assume you are running alcali locally. If you are using docker, just prepend commands with docker exec -it <name> First make sure that Alcali is correctly installed. You can verify installation by running: alcali current_version # alcali version 2019.2.2 You can also check that Alcali can access salt database and that needed env var are set and loaded by running: alcali check # db: ok # env: ok First Run \u00b6 Apply migrations \u00b6 Danger On the first run and after every update, you need to make sure that the database is synchronized with the current set of models and migrations. If unsure, just run alcali migrate Locally: alcali migrate Create a super user \u00b6 Run: alcali createsuperuser You will be prompted for your desired login, email address and password. Run \u00b6 Once migrations are applied and a super user is created, you can start the application. Alcali use Gunicorn as a WSGI HTTP server. It is installed during the installation process of Alcali. Warning If the .env file is not in your current directory, prepend your command with ENV_PATH=/path/to/env_file If you installed Alcali from sources, at the root of the repository, run: gunicorn config.wsgi:application -w 4 If you installed Alcali using pip, run: gunicorn config.wsgi:application -w 4 --chdir $(alcali location) In a docker container: docker run --rm -it -p 8000:8000 --env-file=FILE latenighttales/alcali:2019.2.2 bash -c \"gunicorn config.wsgi:application -w 4 --chdir $(alcali location)\" Where FILE is the location of the .env file","title":"Running Alcali"},{"location":"running/#running-alcali","text":"Info This page will assume you are running alcali locally. If you are using docker, just prepend commands with docker exec -it <name> First make sure that Alcali is correctly installed. You can verify installation by running: alcali current_version # alcali version 2019.2.2 You can also check that Alcali can access salt database and that needed env var are set and loaded by running: alcali check # db: ok # env: ok","title":"Running Alcali"},{"location":"running/#first-run","text":"","title":"First Run"},{"location":"running/#apply-migrations","text":"Danger On the first run and after every update, you need to make sure that the database is synchronized with the current set of models and migrations. If unsure, just run alcali migrate Locally: alcali migrate","title":"Apply migrations"},{"location":"running/#create-a-super-user","text":"Run: alcali createsuperuser You will be prompted for your desired login, email address and password.","title":"Create a super user"},{"location":"running/#run","text":"Once migrations are applied and a super user is created, you can start the application. Alcali use Gunicorn as a WSGI HTTP server. It is installed during the installation process of Alcali. Warning If the .env file is not in your current directory, prepend your command with ENV_PATH=/path/to/env_file If you installed Alcali from sources, at the root of the repository, run: gunicorn config.wsgi:application -w 4 If you installed Alcali using pip, run: gunicorn config.wsgi:application -w 4 --chdir $(alcali location) In a docker container: docker run --rm -it -p 8000:8000 --env-file=FILE latenighttales/alcali:2019.2.2 bash -c \"gunicorn config.wsgi:application -w 4 --chdir $(alcali location)\" Where FILE is the location of the .env file","title":"Run"},{"location":"screenshots/","text":"Screenshots \u00b6 Login Login Dark Dashboard \u00b6 Minions \u00b6 Minion Details \u00b6 Jobs Jobs Dark Job Details \u00b6 Run \u00b6 Job Templates \u00b6 Keys Keys Dark Conformity \u00b6 Conformity Details \u00b6 Users \u00b6 Settings \u00b6","title":"Screenshots"},{"location":"screenshots/#screenshots","text":"Login Login Dark","title":"Screenshots"},{"location":"screenshots/#dashboard","text":"","title":"Dashboard"},{"location":"screenshots/#minions","text":"","title":"Minions"},{"location":"screenshots/#minion-details","text":"Jobs Jobs Dark","title":"Minion Details"},{"location":"screenshots/#job-details","text":"","title":"Job Details"},{"location":"screenshots/#run","text":"","title":"Run"},{"location":"screenshots/#job-templates","text":"Keys Keys Dark","title":"Job Templates"},{"location":"screenshots/#conformity","text":"","title":"Conformity"},{"location":"screenshots/#conformity-details","text":"","title":"Conformity Details"},{"location":"screenshots/#users","text":"","title":"Users"},{"location":"screenshots/#settings","text":"","title":"Settings"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 Salt-Api connection \u00b6 you can try this curl command using pam authentication and see if you can login Salt-Api using the alcali auth module \u00b6 If the salt-api works with pam auth, then there's probably an issue with the alcali authentication : Is the auth module accessible to salt? (it should be in a sub folder called auth of the file_roots Have you run salt-run saltutil.sync_all on the salt-master? it is needed for the salt-master to \"see\" the auth module. Log messages of the salt-api and salt-master should tell you if the module is found and auth is successful. Salt Master configuration example \u00b6 A salt-master configuration in the repository as an example.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#salt-api-connection","text":"you can try this curl command using pam authentication and see if you can login","title":"Salt-Api connection"},{"location":"troubleshooting/#salt-api-using-the-alcali-auth-module","text":"If the salt-api works with pam auth, then there's probably an issue with the alcali authentication : Is the auth module accessible to salt? (it should be in a sub folder called auth of the file_roots Have you run salt-run saltutil.sync_all on the salt-master? it is needed for the salt-master to \"see\" the auth module. Log messages of the salt-api and salt-master should tell you if the module is found and auth is successful.","title":"Salt-Api using the alcali auth module"},{"location":"troubleshooting/#salt-master-configuration-example","text":"A salt-master configuration in the repository as an example.","title":"Salt Master configuration example"},{"location":"try/","text":"Try it! \u00b6 If you just want to have a look, just clone the repository and use docker-compose : git clone https://github.com/latenighttales/alcali.git cd alcali docker-compose up --scale minion=2 Once you see minions waiting to be approved by the master, you're good to go: ... minion_1 | [ERROR ] The Salt Master has cached the public key for this node, this salt minion will wait for 10 seconds before attempting to re-authenticate minion_1 | [INFO ] Waiting 10 seconds before retry. ... Just connect on http://127.0.0.1:8000 , login with: username: admin password: password and follow the walkthrough . Once you're done, you can install it .","title":"Try it!"},{"location":"try/#try-it","text":"If you just want to have a look, just clone the repository and use docker-compose : git clone https://github.com/latenighttales/alcali.git cd alcali docker-compose up --scale minion=2 Once you see minions waiting to be approved by the master, you're good to go: ... minion_1 | [ERROR ] The Salt Master has cached the public key for this node, this salt minion will wait for 10 seconds before attempting to re-authenticate minion_1 | [INFO ] Waiting 10 seconds before retry. ... Just connect on http://127.0.0.1:8000 , login with: username: admin password: password and follow the walkthrough . Once you're done, you can install it .","title":"Try it!"},{"location":"upgrade/","text":"Upgrade \u00b6 Danger Each time you upgrade Alcali, you must apply database migrations. To do so, you must first stop the service, upgrade, and then, just run: alcali migrate And restart the service.","title":"Upgrade"},{"location":"upgrade/#upgrade","text":"Danger Each time you upgrade Alcali, you must apply database migrations. To do so, you must first stop the service, upgrade, and then, just run: alcali migrate And restart the service.","title":"Upgrade"},{"location":"walkthrough/","text":"Walkthrough \u00b6 After you logged in at http://localhost:8000/#/login with: username: admin password: password You should land on the Dashboard view. For now it's empty, but you can already see that some keys are UNACCEPTED . So let's go to the Keys view: http://localhost:8000/#/keys Accept keys \u00b6 You can either accept keys one by one using the ACCEPT button, or use the action button to accept all keys. Add minions \u00b6 To store infos on connected minions, we need to add them to the database. Go to http://localhost:8000/#/minions and use the action button to refresh minions. Info By default , refreshing minions will run: test.ping grains.items pillar.items on each connected minions. Minion detail \u00b6 From the minions view, you can click on a minion id to see its details, for example: http://localhost:8000/#/minions/master/ . Details are parsed from the grains.items state. On the right, 4 tabs are present for now: grains.items pillar.items The last 100 jobs run on this minion A graph of jobs run on this minion Let's add some useful infos by setting some minions fields . To do so, go to the settings view http://localhost:8000/#/settings . Settings \u00b6 Choose a target and run the module parser to have documentation and module completion. Let's add some minion fields. We usually add: highstate: state.show_highstate top file: state.show_top Use the action button to refresh all minions. If you go see a minion's details, for example, http://localhost:8000/#/minions/master/ , the new minion fields should be present. Minion fields are usually used for \"static\" minion specific data. For dynamic data, there's conformity. As a config management tool, it's important to track state of files presence, software version, etc... Custom conformity let you do that. As an example, we'll add: foo: file.file_exists /foo.txt pyversion: cmd.run \"python --version\" If you go to the overview , the two new custom conformity should be present but empty. Let's go run some jobs to fix that. Run \u00b6 Go to http://localhost:8000/#/run You can explore the formatted tab or just use the cli and run: salt master cmd.run \"touch /foo.txt\" We just created the file /foo.txt on the master, so the master will comply to the \"foo\" conformity we added earlier. Conformity is parsed from the states present in the database, so let's run: salt * cmd.run \"python --version\" salt * file.file_exists \"/foo.txt\" By the way, there should be tab completion in the CLI and documentation in the tooltip on the formatted tab thanks to the parse module action we did earlier. Finally, highstate any or all minions. salt master state.apply Conformity \u00b6 In the overview, the conformity card should be filled now, with details when you hover it. A table with both highstate conformity and your custom ones for all minions is available in the conformity view http://localhost:8000/#/conformity . Details about each states in the highstate are available by clicking the DETAIL button.","title":"Walkthrough"},{"location":"walkthrough/#walkthrough","text":"After you logged in at http://localhost:8000/#/login with: username: admin password: password You should land on the Dashboard view. For now it's empty, but you can already see that some keys are UNACCEPTED . So let's go to the Keys view: http://localhost:8000/#/keys","title":"Walkthrough"},{"location":"walkthrough/#accept-keys","text":"You can either accept keys one by one using the ACCEPT button, or use the action button to accept all keys.","title":"Accept keys"},{"location":"walkthrough/#add-minions","text":"To store infos on connected minions, we need to add them to the database. Go to http://localhost:8000/#/minions and use the action button to refresh minions. Info By default , refreshing minions will run: test.ping grains.items pillar.items on each connected minions.","title":"Add minions"},{"location":"walkthrough/#minion-detail","text":"From the minions view, you can click on a minion id to see its details, for example: http://localhost:8000/#/minions/master/ . Details are parsed from the grains.items state. On the right, 4 tabs are present for now: grains.items pillar.items The last 100 jobs run on this minion A graph of jobs run on this minion Let's add some useful infos by setting some minions fields . To do so, go to the settings view http://localhost:8000/#/settings .","title":"Minion detail"},{"location":"walkthrough/#settings","text":"Choose a target and run the module parser to have documentation and module completion. Let's add some minion fields. We usually add: highstate: state.show_highstate top file: state.show_top Use the action button to refresh all minions. If you go see a minion's details, for example, http://localhost:8000/#/minions/master/ , the new minion fields should be present. Minion fields are usually used for \"static\" minion specific data. For dynamic data, there's conformity. As a config management tool, it's important to track state of files presence, software version, etc... Custom conformity let you do that. As an example, we'll add: foo: file.file_exists /foo.txt pyversion: cmd.run \"python --version\" If you go to the overview , the two new custom conformity should be present but empty. Let's go run some jobs to fix that.","title":"Settings"},{"location":"walkthrough/#run","text":"Go to http://localhost:8000/#/run You can explore the formatted tab or just use the cli and run: salt master cmd.run \"touch /foo.txt\" We just created the file /foo.txt on the master, so the master will comply to the \"foo\" conformity we added earlier. Conformity is parsed from the states present in the database, so let's run: salt * cmd.run \"python --version\" salt * file.file_exists \"/foo.txt\" By the way, there should be tab completion in the CLI and documentation in the tooltip on the formatted tab thanks to the parse module action we did earlier. Finally, highstate any or all minions. salt master state.apply","title":"Run"},{"location":"walkthrough/#conformity","text":"In the overview, the conformity card should be filled now, with details when you hover it. A table with both highstate conformity and your custom ones for all minions is available in the conformity view http://localhost:8000/#/conformity . Details about each states in the highstate are available by clicking the DETAIL button.","title":"Conformity"},{"location":"views/conformity/","text":"Conformity \u00b6 Highstate \u00b6 Highstate conformity will schedule a job named highstate_conformity on selected targets. The function used is state . apply test = True . You can use salt targeting syntax, e.g: -G 'os:Fedora' . By default, it will target all minions ( '*' ). Custom \u00b6 Custom conformity will parse the supplied function in minions job history and provide the result on the overview page. To be meaningful, you should run the function regularly (e.g. scheduling a recurring job).","title":"Conformity"},{"location":"views/conformity/#conformity","text":"","title":"Conformity"},{"location":"views/conformity/#highstate","text":"Highstate conformity will schedule a job named highstate_conformity on selected targets. The function used is state . apply test = True . You can use salt targeting syntax, e.g: -G 'os:Fedora' . By default, it will target all minions ( '*' ).","title":"Highstate"},{"location":"views/conformity/#custom","text":"Custom conformity will parse the supplied function in minions job history and provide the result on the overview page. To be meaningful, you should run the function regularly (e.g. scheduling a recurring job).","title":"Custom"},{"location":"views/conformity_details/","text":"Conformity Details \u00b6 All states are sorted by status.","title":"Conformity Details"},{"location":"views/conformity_details/#conformity-details","text":"All states are sorted by status.","title":"Conformity Details"},{"location":"views/events/","text":"Events \u00b6 By default, display only the last 100 Events. Danger It's up to you to monitor salt database. The salt_events table can grow very rapidely. Returners have method to clean jobs regularly.","title":"Events"},{"location":"views/events/#events","text":"By default, display only the last 100 Events. Danger It's up to you to monitor salt database. The salt_events table can grow very rapidely. Returners have method to clean jobs regularly.","title":"Events"},{"location":"views/job_detail/","text":"Job Detail \u00b6 If the job isn't a highstate, we'll use the nested outputter.","title":"Job Details"},{"location":"views/job_detail/#job-detail","text":"If the job isn't a highstate, we'll use the nested outputter.","title":"Job Detail"},{"location":"views/job_templates/","text":"Job Templates \u00b6 To create a job template, fill some fields in the run view, switch on \"Save as Template\", and choose a name.","title":"Job Templates"},{"location":"views/job_templates/#job-templates","text":"To create a job template, fill some fields in the run view, switch on \"Save as Template\", and choose a name.","title":"Job Templates"},{"location":"views/jobs/","text":"Jobs \u00b6 By default, only the last 100 jobs are displayed. You can display/search more using the filters on top. Filter by: date or date range minion(s). user(s). To access job detail either click on the jid or detail button.","title":"Jobs"},{"location":"views/jobs/#jobs","text":"By default, only the last 100 jobs are displayed. You can display/search more using the filters on top. Filter by: date or date range minion(s). user(s). To access job detail either click on the jid or detail button.","title":"Jobs"},{"location":"views/keys/","text":"Keys \u00b6 If you use Alcali master returner, Keys should be automatically refreshed. That's the only difference from the original MySQL Salt returner . Otherwise, you should refresh keys manually using the action button. Action buttons To make life easier, states used to manage keys are more radical than default salt behaviour. It means that if you use the REJECT button, it will use include_accepted and include_denied argument. If you use the ACCEPT button, it will use include_rejected and include_denied argument. Use wisely.","title":"Keys"},{"location":"views/keys/#keys","text":"If you use Alcali master returner, Keys should be automatically refreshed. That's the only difference from the original MySQL Salt returner . Otherwise, you should refresh keys manually using the action button. Action buttons To make life easier, states used to manage keys are more radical than default salt behaviour. It means that if you use the REJECT button, it will use include_accepted and include_denied argument. If you use the ACCEPT button, it will use include_rejected and include_denied argument. Use wisely.","title":"Keys"},{"location":"views/minion_details/","text":"Minion Detail \u00b6 Infos and Network \u00b6 All those details are parsed from grain.items except conformity.(see conformity for more infos). By default, the right section contains only: GRAIN: grains.items PILLAR: pillar.items HISTORY: Last 100 jobs for this minion. GRAPH: Filtered for this minion. You can add more section by adding some minion custom fields . We recommend adding: HIGHSTATE: state.show_highstate TOP FILE: state.show_top","title":"Minion Details"},{"location":"views/minion_details/#minion-detail","text":"","title":"Minion Detail"},{"location":"views/minion_details/#infos-and-network","text":"All those details are parsed from grain.items except conformity.(see conformity for more infos). By default, the right section contains only: GRAIN: grains.items PILLAR: pillar.items HISTORY: Last 100 jobs for this minion. GRAPH: Filtered for this minion. You can add more section by adding some minion custom fields . We recommend adding: HIGHSTATE: state.show_highstate TOP FILE: state.show_top","title":"Infos and Network"},{"location":"views/minions/","text":"Minions \u00b6 List all minions currently in Alcali database. To add more minions, use the action button and refresh all minions. Info By default, refreshing minions will run test.ping grains.items and pillar.items on all minions responding to test.ping . If you add custom minions fields , the states you add will be run too. To access minion details , click on the minion id.","title":"Minions"},{"location":"views/minions/#minions","text":"List all minions currently in Alcali database. To add more minions, use the action button and refresh all minions. Info By default, refreshing minions will run test.ping grains.items and pillar.items on all minions responding to test.ping . If you add custom minions fields , the states you add will be run too. To access minion details , click on the minion id.","title":"Minions"},{"location":"views/overview/","text":"Overview \u00b6 Conformity \u00b6 Conformity details can be managed on the conformity page. You can set a maximum of 4 custom conformity fields. To be relevant, functions tracked by conformity fields must be run regularly. Keys \u00b6 Summary of keys status. You can manage keys on the keys page. Status \u00b6 SALT WEB SOCKET \u00b6 To display notifications on currently running jobs, alcali needs to connect to the Salt master web socket using credentials provided in the configuration . JOBS AND EVENTS IN DB \u00b6 Please refer to Mysql or Postgres returner documentation on how to manage database from Salt. A summary is provided in the installation section. JOBS SCHEDULED \u00b6 How many unique jobs based on the job name are currently enabled (see schedule section). JOBS RUNNING \u00b6 Parsed from Salt web socket. Jobs Stats \u00b6 Filter: ALL: All jobs. HIGHSTATE: only state.apply and state.highstate jobs. OTHER: All excluding state.apply and state.highstate jobs. Last Jobs \u00b6 The last 10 jobs run (see jobs section). Real time events \u00b6 JSON formatted events in real time.","title":"Overview"},{"location":"views/overview/#overview","text":"","title":"Overview"},{"location":"views/overview/#conformity","text":"Conformity details can be managed on the conformity page. You can set a maximum of 4 custom conformity fields. To be relevant, functions tracked by conformity fields must be run regularly.","title":"Conformity"},{"location":"views/overview/#keys","text":"Summary of keys status. You can manage keys on the keys page.","title":"Keys"},{"location":"views/overview/#status","text":"","title":"Status"},{"location":"views/overview/#salt-web-socket","text":"To display notifications on currently running jobs, alcali needs to connect to the Salt master web socket using credentials provided in the configuration .","title":"SALT WEB SOCKET"},{"location":"views/overview/#jobs-and-events-in-db","text":"Please refer to Mysql or Postgres returner documentation on how to manage database from Salt. A summary is provided in the installation section.","title":"JOBS AND EVENTS IN DB"},{"location":"views/overview/#jobs-scheduled","text":"How many unique jobs based on the job name are currently enabled (see schedule section).","title":"JOBS SCHEDULED"},{"location":"views/overview/#jobs-running","text":"Parsed from Salt web socket.","title":"JOBS RUNNING"},{"location":"views/overview/#jobs-stats","text":"Filter: ALL: All jobs. HIGHSTATE: only state.apply and state.highstate jobs. OTHER: All excluding state.apply and state.highstate jobs.","title":"Jobs Stats"},{"location":"views/overview/#last-jobs","text":"The last 10 jobs run (see jobs section).","title":"Last Jobs"},{"location":"views/overview/#real-time-events","text":"JSON formatted events in real time.","title":"Real time events"},{"location":"views/run/","text":"Run \u00b6 You can run job using either the formatted form or a pseudo cli. Formatted \u00b6 For function completion and documentation, use the parse module setting. Your custom modules should also be present. Client type \u00b6 Local: Run execution modules synchronously. Sends a command from the master to the targeted minions. This is the same interface that Salt's own CLI uses. Runner: Master side execution sequences. Wheel: Master side management routine. Target type \u00b6 Target \u00b6 This depends on the selected Target type . Function \u00b6 Function completion and documentation are taken from the parse module setting. Args and Keyword Arguments \u00b6 Use these fields for functions. If functions use named args or kwargs, they should be suggested. Schedule \u00b6 Schedule a recurring job, or postpone it. Test button \u00b6 The test button will run the selected function with test = True kwarg added set. CLI \u00b6 This pseudo CLI should work like the salt command. There's a basic completion on minions and states. If you want to run a state using another client type use --client= argument. For example: salt --client=wheel key.list_all","title":"Run"},{"location":"views/run/#run","text":"You can run job using either the formatted form or a pseudo cli.","title":"Run"},{"location":"views/run/#formatted","text":"For function completion and documentation, use the parse module setting. Your custom modules should also be present.","title":"Formatted"},{"location":"views/run/#client-type","text":"Local: Run execution modules synchronously. Sends a command from the master to the targeted minions. This is the same interface that Salt's own CLI uses. Runner: Master side execution sequences. Wheel: Master side management routine.","title":"Client type"},{"location":"views/run/#target-type","text":"","title":"Target type"},{"location":"views/run/#target","text":"This depends on the selected Target type .","title":"Target"},{"location":"views/run/#function","text":"Function completion and documentation are taken from the parse module setting.","title":"Function"},{"location":"views/run/#args-and-keyword-arguments","text":"Use these fields for functions. If functions use named args or kwargs, they should be suggested.","title":"Args and Keyword Arguments"},{"location":"views/run/#schedule","text":"Schedule a recurring job, or postpone it.","title":"Schedule"},{"location":"views/run/#test-button","text":"The test button will run the selected function with test = True kwarg added set.","title":"Test button"},{"location":"views/run/#cli","text":"This pseudo CLI should work like the salt command. There's a basic completion on minions and states. If you want to run a state using another client type use --client= argument. For example: salt --client=wheel key.list_all","title":"CLI"},{"location":"views/schedule/","text":"Schedule \u00b6 Warning Schedules are not automatically added to the list. To refresh schedules, use the action refresh schedule button. You can disable and delete schedules.","title":"Schedule"},{"location":"views/schedule/#schedule","text":"Warning Schedules are not automatically added to the list. To refresh schedules, use the action refresh schedule button. You can disable and delete schedules.","title":"Schedule"},{"location":"views/settings/","text":"Settings \u00b6 General Settings \u00b6 Parse modules \u00b6 To provide function completion and documentation run this on a selected target. This will run sys.list_functions , sys.doc , sys.list_runner_functions and sys.runner_doc on the selected target. It will also run doc.wheel on the connected salt master. If you have custom modules present on the selected target, they will be parsed too. Minions Fields \u00b6 To add more details in the minion detail page, you can add custom minions fields. We usually add: highstate : state.show_highstate top file : state.show_highstate Info Because minions fields are linked to minions, you need to first have some minions present in the database. Use the refresh minions action button. User Settings \u00b6 Job notifications \u00b6 Filter which events are being displayed in the notification section and real-time events. Warning Salt's event stream is very busy and can easily overwhelm the available memory for a browser tab. This control both notifications and real-time events on the overview page.","title":"Settings"},{"location":"views/settings/#settings","text":"","title":"Settings"},{"location":"views/settings/#general-settings","text":"","title":"General Settings"},{"location":"views/settings/#parse-modules","text":"To provide function completion and documentation run this on a selected target. This will run sys.list_functions , sys.doc , sys.list_runner_functions and sys.runner_doc on the selected target. It will also run doc.wheel on the connected salt master. If you have custom modules present on the selected target, they will be parsed too.","title":"Parse modules"},{"location":"views/settings/#minions-fields","text":"To add more details in the minion detail page, you can add custom minions fields. We usually add: highstate : state.show_highstate top file : state.show_highstate Info Because minions fields are linked to minions, you need to first have some minions present in the database. Use the refresh minions action button.","title":"Minions Fields"},{"location":"views/settings/#user-settings","text":"","title":"User Settings"},{"location":"views/settings/#job-notifications","text":"Filter which events are being displayed in the notification section and real-time events. Warning Salt's event stream is very busy and can easily overwhelm the available memory for a browser tab. This control both notifications and real-time events on the overview page.","title":"Job notifications"},{"location":"views/users/","text":"Users \u00b6 Create, update and delete users.","title":"Users"},{"location":"views/users/#users","text":"Create, update and delete users.","title":"Users"}]}